# This workflow is for testing PySys itself. 
# If you're looking for something to copy from for your own projects use pysys-test-samples.yml insead.

name: PySys

on:
  push:
    branches: [ master, 1.6.2features]
  pull_request:
    branches: [ master ]

jobs:
  test:
    strategy:
      # Disable fail fast since it's useful to see test results for all platforms even if some failed
      fail-fast: false
      
      matrix:
        # A selection range of OS, Python and Java versions
        include:
          - test-run-id: lnx-py3.8-doc-deploy
            os: ubuntu-latest
            python-version: 3.8
            doc-and-deploy: true
          
          - test-run-id: mac-py2.7
            os: macos-latest
            python-version: 2.7

          - test-run-id: win-py3.7
            os: windows-latest
            python-version: 3.7

          # --- Additional testing combinations only on the main branch

    runs-on: ${{matrix.os}}
    
    steps:
      # Install the desired version of Python and PySys
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
          
      - name: Cache Python deps (get location)
        id: pip-cache
        run: |
            python -m pip install -U "pip>=20.1"
            echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache Python deps
        uses: actions/cache@v2
        with:
            path: ${{ steps.pip-cache.outputs.dir }}
            key: ${{ matrix.test-run-id }}-pip

      - name: Python dependencies - install
        id: deps
        shell: bash
        run: |
          python --version
          python -m pip install --upgrade setuptools wheel

      - name: Pre-build deployment tailoring
        if: matrix.doc-and-deploy
        shell: bash
        run: |
             export PYSYS_VERSION=`cat VERSION`
             mkdir dist

             # pre-process module file to include current date, which also goes into the HTML doc
             sed -i "s/__date__ = .*/__date__ = \"`date --iso-8601`\"/g" "pysys/__init__.py"
             echo Build date:
             grep "__date__" "pysys/__init__.py"

             # create sample tests directory with both windows and linux line endings; leave it with windows endings so testing shows up any issues
             echo --- Preparing PySys sample zip archives
             cd samples
             # copy everything - use . instead of * to avoid missing the hidden directories such as .github
             cp -R common-files/. getting-started/
             cp -R common-files/. cookbook/
             tar -czf ../dist/PySys-$PYSYS_VERSION-samples-unix.tar.gz getting-started cookbook

             # don't change the .sh script since we need it to be executable
             find . -type f -not -name "*.sh" | xargs dos2unix
             zip -r --quiet ../dist/PySys-$PYSYS_VERSION-samples-win.zip getting-started cookbook
       
      - name: Build PySys
        shell: bash
        run: |
          # build universal wheel and python source distribution
          python setup.py check --strict
          python setup.py bdist_wheel
          python setup.py sdist

      - name: Install PySys
        shell: bash
        run: |
          python -m pip install dist/PySys*.whl
          pysys.py --version

          # Once it's installed, also add the coverage module
          # force coverage version to 4.5.4 since the next version requires an sqlite module that doesn't work on macos pythons
          python -m pip install coverage==4.5.4 codecov
      
      - name: Main tests
        shell: bash
        working-directory: tests
        run: |
          python -m coverage run --rcfile ./pysys-extensions/python_coveragerc ../scripts/pysys.py run -XpythonCoverage --ci --outdir main

          # upload Python code coverage - since we're measuring PySys itself, include both 
          # top-level .coverage file and the files collected by PySys from its PySys subprocesses
          # have to delete coverage.xml otherwise codecov doesn't look for .coverage* files
          mv .coverage ./__coverage_python.main/.coverage.toplevel
          rm ./__coverage_python.main/coverage.xml
          #cd __coverage_python.main
          #codecov


      - name: Upload archive artifacts for any test failures
        uses: actions/upload-artifact@v2
        if: always() && steps.pysys.outputs.artifact_TestOutputArchiveDir

        with:
          name: pysys_output_${{matrix.test-run-id}}
          path: ${{ steps.pysys.outputs.artifact_TestOutputArchiveDir }}


      - name: Extra tests
        shell: bash
        working-directory: tests
        run: |
          # re-run the international tests with a different locale; would like to use iso8859-1 but not installed on Travis currently
          # it's hard to override language on many OSes so just do this on linux
          - if [[ ${{ runner.os }} == "Linux" ]]; then LANG=C LANGUAGE=C LC_ALL=C PYTHONUTF8=0 PYTHONCOERCECLOCALE=0 pysys.py run --ci --include i18n --outdir i18n-C ; fi
          
          # as a quick sanity-test, also run packaging tests after installing from source
          - python -m pip uninstall --yes PySys
          - "python -m pip install ../dist/PySys-$PYSYS_VERSION.tar.gz"
          - pysys.py run --ci --include pysys-packaging --outdir against-src-dist-setuptools

          # as a final sanity-test, also run packaging tests directly from source in "develop mode" as a pysys developer probably would
          - python -m pip uninstall --yes PySys
          - "python -m pip install -e .."
          - pysys.py run --ci --include pysys-packaging --outdir against-src-develop-mode

      - name: Upload Python package .whl
        if: matrix.doc-and-deploy
        uses: actions/upload-artifact@v2
        with:
          name: installation_package
          path: dist/*.whl

      - name: Upload Python code coverage
        uses: codecov/codecov-action@v1
        if: steps.pysys.outputs.artifact_PythonCoverageDir
        with:
          directory: ${{ steps.pysys.outputs.artifact_PythonCoverageDir }}
        
      # If any tests fail, PySys will return an error code, so we need "if: always()" so the following steps will run
