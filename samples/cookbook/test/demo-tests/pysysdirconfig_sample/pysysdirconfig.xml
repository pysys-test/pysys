<?xml version="1.0" encoding="utf-8"?>
<pysysdirconfig>
	<!-- This file provides default configuration for all tests under this directory. -->

	<!-- Specify a prefix to be added to the id of all tests under this directory.
	This is in addition to any defined by individual tests. 
	-->
	<id-prefix>MyServer.Performance.</id-prefix>

	<classification>
		<!-- Specify the groups that all tests under this directory will be tagged with, allowing them to be selected 
		for inclusion/exclusion in test runs. Groups are usually named in camelCase. 
		These groups are in addition to any defined by individual tests, and (if inherit=true) any from parent pysysdirconfigs. -->
		-->
		<groups inherit="true">
			<group>performance</group>
			
			<!-- This group is used by code coverage writers to ensure coverage tools are disabled for tests that 
			are performance-critical. 
			-->
			<group>disableCoverage</group>
		</groups>

		<!-- Specify modes supported by all tests under this directory. Like test ids, mode names are usually TitleCase.
		These modes are in addition to any defined by individual tests, and (if inherit=true) any from parent pysysdirconfigs. 
		-->
		<modes inherit="true">
			<mode>CompressionNone_AuthNone</mode>
			<mode>CompressionGZip_AuthNone</mode>
		</modes>
	</classification>

	<!-- Specify as a floating point number an indicator of when to run the tests under 
	this directory, relative to other tests/directories with a higher or lower hint. 
	Empty string hint="" means inherit. The default priority is 0.0 so set the hint to a higher 
	value to execute tests later, or a negative value to execute tests earlier. 
	-->
	<execution-order hint="+100.0"/>

	<!-- Comment/uncomment this to mark all tests under this directory as skipped. -->
	<skipped reason="These tests are skipped until bug XYZ is fixed"/>

	<data>
		<!-- By convention the test class uses module="run.py" located in the test directory, but 
		it is possible to use a different path (even an absolute path). If you want to use a single 
		Python class for lots of tests rather, omit the module= attribute and make sure it's available 
		on the project's <pythonpath> . 
		-->
		<class name="PySysTest" module="${testRootDir}/pysys-extensions/MySharedTestClass.py"/>
		
		<!-- If desired you could customize the directory to which test output is written and/or the 
		Input/Reference directories. Can be overridden by individual tests. 
		-->
		<output path="MyOutput"/>
		<input path="${testRootDir}/pysys-extensions/my_shared_input_files"/>
		<reference path="MyReference"/>
		
		<!-- The ability to add user-defined data to the test descriptor is mostly useful when using a 
		shared Python class for lots of tests. 
		
		Project properties (but not other user-data values) can be substituted into the value using ${...}. 
		-->
		<user-data name="myTestDescriptorData" value="foobar"/>
		
		<!-- For long values such as paths the value can be specified in a text (or CDATA) node, and if the 
		value is to be converted to a list, newline and/or comma can be used as delimiters. -->
		<user-data name="myTestDescriptorPath">
			foo/foo-${os_myThirdPartyLibraryVersion}
			foo/bar, foo/baz
			<!-- Comments and whitespace are ignored when converting a string to a list. -->
			foo/bosh
		</user-data>
	</data>

	<traceability>
		<requirements>
			<!-- Specify traceability requirements implemented by the tests under this directory. 
			This is in addition to any defined by individual tests. 
			You can use this for whatever makes sense in your project; see examples below. 
			-->
			<requirement id="UserRequirement_1a"/> 
			<requirement id="UserRequirement_2c"/> 
			<requirement id="Performance"/>
			<requirement id="UserStory.XYZ-54321"/>
		</requirements>
	</traceability>
	
</pysysdirconfig>