<?xml version="1.0" encoding="utf-8"?>
<pysysdirconfig>
	<!-- This file provides default configuration for all tests under this directory. 
	
	Settings are also inherited from pysysdirconfig.xml files in parent directories 
	(and the pysysdirconfig element from pysysproject.xml if present). 
	-->

	<!-- Specify a prefix to be added to the id of all tests under this directory.
	This is in addition to any defined by individual tests. 
	-->
	<id-prefix>MyServer.Performance.</id-prefix>
	
	<!-- Specify the templates that can be used by "pysys make" when creating new tests. You may wish to provide 
	project or directory-specific template(s) to simplify creating new tests for different purposes, and to encourage 
	test creators to follow best practices (rather than just copying from a random test which may not be a good example). 
	
	Run "pysys make -h" to see which templates are available for creating tests under the current directory. 
	
	The first template (in the lowest-level pysysdirconfig.xml file) is used by default. 
	
	Each template is defined by:
	
	  - name: A short name used to select this template on the command line ("lowercase-with-hyphens" naming convention).
	  - description: A brief summary describing what kind of test is created by this template. This text is displayed 
	    when running "pysys make -h". 
	  - copy: A comma-separated list of files and directories to be copied into the test directory, supporting ``*`` 
	    globs. Either specify a path relative to the directory containing this XML file, or an absolute path using 
	    project properties. To use files from the default PySys template use "${pysysTemplatesDir}/test/*".
	    You could store your directory-specific templates in a ``_pysys_templates/`` directory alongside this XML file, 
	    or you could use a real (but simple) test to copy from (with suitable regex replacements to make it more generic). 
	  - mkdir: By default empty directories are created for the configured input, output and reference directories.  
	    Specify this attribute to define explicitly which empty directories should be created. 
	  - replace: Specify any dynamic substitutions, which will be applied in all copied files. It is recommended to 
	    use only ASCII-characters (but if any non-ASCII characters are provided they will be substituted as UTF-8). 
	    The replacement "with" expressions can include project properties using ``${propname}`` syntax, or 
	    the special strings ``@{DIR_NAME}``, ``@{USERNAME}``, ``@{DATE}``. If no replace elements are explicitly 
	    provided, the following default replacements are used:
	    
	      @@DATE@@ -> @{DATE} (the current date)
	      @@USERNAME@@ -> @{USERNAME} (the currently logged in user)
	      @@DIR_NAME@@ -> @{DIR_NAME} (the basename of the directory being created, typically the test id)
	-->
	<maker-template name="perf-test" description="a simple performance test using MyPerfTool" 
		copy="${pysysTemplatesDir}/test/*, ./_pysys_templates/perf/my-perf-config.xml"/>
	
	<maker-template name="foobar-test" description="an advanced test based on the simple foobar test" 
		copy="./PySysDirConfigSample/*" 
		mkdir="ExtraDir1, ExtraDir2"
	>
		<replace regex='date="\d\d\d\d-\d\d-\d\d"' with='date="@{DATE}"'/>
		<replace regex='title="[^"]*"' with='title="Foobar - My new test title TODO"'/>
		<replace regex='username="[^"]*"' with='username="@{USERNAME}"'/>
		<replace regex='@@DIR_NAME@@' with='@{DIR_NAME}'/>
	</maker-template>

	<classification>
		<!-- Specify the groups that all tests under this directory will be tagged with, allowing them to be selected 
		for inclusion/exclusion in test runs. Groups are usually named in camelCase. 
		These groups are in addition to any defined by individual tests, and (if inherit=true) any from parent pysysdirconfigs. -->
		-->
		<groups inherit="true">
			<group>performance</group>
			
			<!-- This group is used by code coverage writers to ensure coverage tools are disabled for tests that 
			are performance-critical. 
			-->
			<group>disableCoverage</group>
		</groups>

		<!-- Specify modes supported by all tests under this directory. Like test ids, mode names are usually TitleCase.
		
		These modes are in addition to any defined by individual tests.
		
		Optional attributes are:
		   inherit=  Specifies whether modes from parent pysysdirconfig.xml files are automatically added to this list. 
		      For clarity this attribute should usually be specified, but if not the default is inherit=true unless 
		      there are multiple modes elements in which case it is false. 
		   primary=  Specifies which mode from this list (including any inherited modes) is the primary one that executes 
		      by default, and before any other modes. If not specified, the first mode is the primary one. 
		   exclude=  Specifies a Python eval string using "mode" (or "mode.params") which can return True for any modes 
		      that should be dynamically removed/ignored from this list, or else False. This is useful for selectively 
		      excluding some inherited modes, or for excluding modes on certain platforms. Note that no test descriptor 
		      is generated for excluded modes, so there will be no result reported (not even SKIPPED) for excluded modes. 
		      
		      This string is evaluated from a Python namespace that includes standard modules such as os/sys/math/re, 
		      as well as the 'pysys' module and the contents of the `pysys.constants` module, e.g. ``IS_WINDOWS``; 
		      (see pysys.utils.safeeval.safeEval for more details). 
		-->
		<modes inherit="true" primary="CompressionNone">
			<!-- The mode name can be specified with a mode= attribute or in the text of the mode element. -->
			<mode mode="CompressionNone" compressionType=""/>
			<mode mode="CompressionGZip" compressionType="gzip"/>
		</modes>
		
		<!-- If multiple modes nodes are present, new modes are created for all combinations -->
		
		<modes modeNamePattern="Auth={auth}" exclude="mode.params['auth'] == 'OS' and sys.platform != 'MyFunkyOS'">
			<mode auth="None"/>
			<mode auth="OS"/>  <!-- This mode will always be excluded since MyFunkyOS doesn't exist. -->
		</modes>
	</classification>

	<!-- Specify as a floating point number an indicator of when to run the tests under 
	this directory, relative to other tests/directories with a higher or lower hint. 
	Empty string hint="" means inherit. The default priority is 0.0 so set the hint to a higher 
	value to execute tests later, or a negative value to execute tests earlier. 
	-->
	<execution-order hint="+100.0"/>

	<!-- Comment/uncomment this to mark all tests under this directory as skipped. -->
	<skipped reason="These tests are skipped until bug XYZ is fixed"/>

	<data>
		<!-- By convention the test class uses module="run.py" located in the test directory, but 
		it is possible to use a different path (even an absolute path). If you want to use a single 
		Python class for lots of tests rather, omit the module= attribute and make sure it's available 
		on the project's <pythonpath> . 
		-->
		<class name="PySysTest" module="${testRootDir}/pysys-extensions/MySharedTestClass.py"/>
		
		<!-- You can customize the Input/Output/Reference directory names if you wish (or even provide an absolute 
		paths if needed). These can also be overridden by individual tests. 
		-->
		<output path="MyOutput"/>
		<input path="${testRootDir}/pysys-extensions/my_shared_input_files"/>
		<reference path="MyReference"/>
		
		<!-- The ability to add user-defined data to the test descriptor is mostly useful when using a 
		shared Python class for lots of tests. 
		
		Project properties (but not other user-data values) can be substituted into the value using ${...}, 
		and ${eval: xxx} syntax can be used to evaluate some Python code (with project properties as Python variables). 
		-->
		<user-data name="myTestDescriptorData" value="foobar"/>
		
		<!-- For long values such as paths the value can be specified in a text (or CDATA) node, and if the 
		value is to be converted to a list, newline and/or comma can be used as delimiters. -->
		<user-data name="myTestDescriptorPath">
			foo/foo-${os_myThirdPartyLibraryVersion}
			foo/bar, foo/baz
			<!-- Comments and whitespace are ignored when converting a string to a list. -->
			foo/bosh
		</user-data>
	</data>

	<traceability>
		<requirements>
			<!-- Specify traceability requirements implemented by the tests under this directory. 
			This is in addition to any defined by individual tests. 
			You can use this for whatever makes sense in your project; see examples below. 
			-->
			<requirement id="UserRequirement_1a"/> 
			<requirement id="UserRequirement_2c"/> 
			<requirement id="Performance"/>
			<requirement id="UserStory.XYZ-54321"/>
		</requirements>
	</traceability>
	
</pysysdirconfig>