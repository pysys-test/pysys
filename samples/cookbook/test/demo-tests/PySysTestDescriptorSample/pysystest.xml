<?xml version="1.0" encoding="utf-8"?>
<pysystest type="auto">
	
	<description> 
		<!-- Test titles should be concise but give a clear idea of what is in scope for this testcase. 
	
		Good titles make it easy to find the test you need even when you have 100s/1000s of tests. 
		Tests can be sorted by title so try to use common prefixes to group related tests together. 
		Titles need to be human readable at-a-glance, so don't put ids (e.g. bug tracking numbers) in the title; 
		the "purpose" or "requirements" are a better place for those details. 
		-->
		<title>My foobar tool - Argument parsing success and error cases</title>
		<purpose><![CDATA[
			This is a good place for a fuller description of what is in and 
			out of scope for this particular testcase. It's also a good place 
			to mention bug tracking ids etc. 
		]]></purpose>
	</description>

	<!-- Comment/uncomment this to mark this test as skipped, which will stop it from executing. -->
	<skipped reason="This test is skipped until bug XYZ is fixed"/>
	
	<classification>
		<!-- Specify the groups that all tests under this directory will be tagged with, allowing them to be selected 
		for inclusion/exclusion in test runs. Groups are usually named in camelCase. 
		These groups are in addition to any defined by individual tests, and (if inherit=true) any from parent pysysdirconfigs. 
		-->
		<groups inherit="true">
			<group>performance</group>
			
			<!-- The disableCoverage group is used by code coverage writers to ensure coverage tools are disabled for 
			tests that are performance-critical. 
			-->
			<group>disableCoverage</group>
		</groups>

		<!-- Specify modes supported by this test. Like test ids, mode names are usually TitleCase.
		
		Optional attributes are:
		   inherit=  Specifies whether modes from parent pysysdirconfig.xml files are automatically added to this list. 
		      For clarity this attribute should usually be specified, but if not the default is inherit=true unless 
		      there are multiple modes elements in which case it is false. 
		   primary=  Specifies which mode from this list (including any inherited modes) is the primary one that executes 
		      by default, and before any other modes. If not specified, the first mode is the primary one. 
		   exclude=  Specifies a Python eval string using "mode" (or "mode.params") which can return True for any modes 
		      that should be dynamically removed/ignored from this list, or else False. This is useful for selectively 
		      excluding some inherited modes, or for excluding modes on certain platforms. Note that no test descriptor 
		      is generated for excluded modes, so there will be no result reported (not even SKIPPED) for excluded modes. 
		      
		      This string is evaluated from a Python namespace that includes standard modules such as os/sys/math/re, 
		      as well as the 'pysys' module and the contents of the `pysys.constants` module, e.g. ``IS_WINDOWS``; 
		      (see pysys.utils.safeeval.safeEval for more details). 
		-->
		<modes inherit="true" primary="CompressionNone">
			<!-- The mode name can be specified with a mode= attribute or in the text of the mode element. -->
			<mode mode="CompressionNone" compressionType=""/>
			<mode mode="CompressionGZip" compressionType="gzip"/>
		</modes>
		
		<!-- If multiple modes nodes are present, new modes are created for all combinations -->
		
		<modes modeNamePattern="Auth={auth}" exclude="mode.params['auth'] == 'OS' and sys.platform != 'MyFunkyOS'">
			<mode auth="None"/>
			<mode auth="OS"/>  <!-- This mode will always be excluded since MyFunkyOS doesn't exist. -->
		</modes>
	</classification>

	<!-- Specify as a floating point number an indicator of when to run the tests under 
	this directory, relative to other tests/directories with a higher or lower hint. 
	Empty string hint="" means inherit. The default priority is 0.0 so set the hint to a higher 
	value to execute tests later, or a negative value to execute tests earlier. 
	-->
	<execution-order hint="+100.0"/>
	
	<data>
		<!-- By convention the test class uses module="run.py" located in the test directory, but 
		it is possible to use a different path (even an absolute path). If you want to use a single 
		Python class for lots of tests rather, omit the module= attribute and make sure it's available 
		on the project's <pythonpath> . 
		-->
		<class name="PySysTest" module="${testRootDir}/pysys-extensions/MySharedTestClass.py"/>

		<!-- You can customize the Input/Output/Reference directory names if you wish (or even provide an absolute 
		paths if needed). -->
		<output path="MyOutput"/>
		<input path="${testRootDir}/pysys-extensions/my_shared_input_files"/>
		<reference path="MyReference"/>
		
		<!-- The ability to add user-defined data to the test descriptor is mostly useful when using a 
		shared Python class for lots of tests. 
		
		Project properties (but not other user-data values) can be substituted into the value using ${...}, 
		and ${eval: xxx} syntax can be used to evaluate some Python code (with project properties as Python variables). 
		-->
		<user-data name="myTestDescriptorData" value="foobar"/>
		
		<!-- For long values such as paths the value can be specified in a text (or CDATA) node, and if the 
		value is to be converted to a list, newline and/or comma can be used as delimiters. -->
		<user-data name="myTestDescriptorPath">
			foo/foo-${os_myThirdPartyLibraryVersion}
			foo/bar, foo/baz
			<!-- Comments and whitespace are ignored when converting a string to a list. -->
			foo/bosh
		</user-data>

	</data>
	
	<traceability>
		<requirements>
			<!-- Specify traceability requirements implemented by this test. 
			You can use this for whatever makes sense in your project; see examples below. -->
			<requirement id="UserRequirement_1a"/> 
			<requirement id="UserRequirement_2c"/> 
			<requirement id="Performance"/>
			<requirement id="UserStory.XYZ-54321"/>
		</requirements>
	</traceability>
</pysystest>
