<?xml version="1.0" encoding="utf-8"?>
<pysystest>
	
	<description> 
		<title>MyServer responses: /sensorValues endpoint (+ demo of PySys assertions, and multiple modes)</title>		
		<purpose><![CDATA[
		To verify that responses from MyServer are correct on the /sensorValues REST endpoint. 
		
		This also shows some of the different approaches to validation in PySys, using various styles of assertion. 
	]]></purpose>
	</description>

	<!-- <skipped reason=""/> -->
	
	<classification>
		<groups inherit="true">
			<group>myServerSensorValues</group>
		</groups>
		
		<modes inherit="true" primary="CompressionNone">
			<!-- This test will be executed for each of the following modes, in this case controlling the compression 
				of results from the server and whether authentication is used. The test can use self.mode to find out which 
				mode it is executing and/or self.mode.params to access any parameters; parameters are also assigned 
				as fields on the test object. Keep mode strings short but self-describing. 
				
				By default first mode listed is the primary one, but optionally this can be overridden using primary="mode". 
			-->
			<mode mode="CompressionNone" compressionType=""/>
			<mode mode="CompressionGZip" compressionType="gzip"/>
		</modes>
		
		<!-- If multiple modes nodes are present, new modes are created for all combinations -->
		
		<modes exclude="mode.params['auth'] == 'OS' and sys.platform != 'MyFunkyOS'" modeNamePattern="Auth={auth}">
			<!-- Modes can be dynamically excluded with a Python eval string. -->
			<!-- Instead of explicitly providing the mode= attribute, you can let PySys pick one 
				automatically based on the params, or provide your own with the modeNamePattern= attribute. -->
			
			<mode auth="None"/>
			<mode auth="OS"/>
		</modes>
	</classification>

	<data>
		<class name="PySysTest" module="run.py"/>
	</data>
	
</pysystest>
