<?xml version="1.0" encoding="utf-8"?>
<pysystest>
	
	<description> 
		<title>MyServer responses: /sensorValues endpoint (+ demo of PySys assertions, and multiple modes)</title>		
		<purpose><![CDATA[
		To verify that responses from MyServer are correct on the /sensorValues REST endpoint. 
		
		This also shows some of the different approaches to validation in PySys, using various styles of assertion. 
	]]></purpose>
	</description>

	<!-- <skipped reason=""/> -->
	
	<classification>
		<groups inherit="true">
			<group>myServerSensorValues</group>
		</groups>

		<!-- This test will be executed for each of the following modes, in this case controlling the compression 
		of results from the server and whether authentication is used. The test can use self.mode to find out which 
		mode it is executing and/or self.mode.params to access any parameters; parameters are also assigned 
		as fields on the test object. Keep mode strings short but self-describing. 
				
		The first mode listed is the primary one.
		-->
		<modes>
			[mode for mode in 
				combineModeDimensions( # Takes any number of mode lists as arguments and returns a single combined mode list
					INHERITED_MODES+[
							{'mode':'CompressionNone', 'compressionType':None},
							{'mode':'CompressionGZip', 'compressionType':'gzip'},
					], 
					[
						{'auth':None}, # Mode name is autogenerated if not explicitly specified
						{'auth':'OS'}, # In practice auth=OS modes will always be excluded since MyFunkyOS isn't a real OS
					]) 
				# This is a Python list comprehension syntax for filtering the items in the list
				if mode['auth'] != 'OS' or sys.platform == 'MyFunkyOS'
			]
		</modes>

	</classification>

	<data>
		<class name="PySysTest" module="run.py"/>
	</data>
	
</pysystest>
