PySys 0.2.1 Release Notes
=========================

This is an early ALPHA release of the software for development purposes. The software 
is liable to change in a non-backwards compatible way until it has reached a BETA status.

PySys has been written and tested against Python 2.4 and higher. Whilst the package 
may run on earlier versions no guarantee as to the successful operation can be made. 
Running on windows requires installation of the pywin32 extensions written by Mark 
Hammond. The extensions can be downloaded from http://sourceforge.net/projects/pywin32.


What's new in this release
--------------------------
- The Manual Tester has been updated to support the <expectedresult> element in the 
  input xml file. This allows display of the expected result for a manual step to 
  be presented in the user interface. The ability to optionally record a defect in 
  the log output is also now included.
- The createDescriptors method has been removed from the pysys.launcher.console 
  package and moved into pysys.launcher. This allows the utility method to be 
  used for other custom launchers.


Installation
------------
Installation on windows is performed by downloading the PySys-X.Y.Z.win32.exe 
installer executable and running. To install on unix systems you should download
the source tar.gz archive and perform the following

 $ tar zxvpf PySys-X.Y.Z.tar.gz
 $ cd PySys-X.Y.Z
 $ python setup.py build
 $ python setup.py install
 
To install you may need to have root privileges on the machine. Installation on 
both windows and unix will install the PySys modules into the site-packages area
of the default python

  
Running the Samples
-------------------
PySys has a set of basic examples to demonstrate it's use for running automated 
and manual testcases. The samples are distributed in a unix line ending friendly 
tar.gz archive, and a windows line ending friendly zip file. To unpack the tests 
on unix systems use

 $ tar zxvpf PySys-examples.X.Y.Z.tar.gz
 $ cd pysys-examples/fibonacci/testcases

The testcases directory consists of 4 example testcases, and 3 launch executables, 
namely runTest.py (used to run a set of tests), printTest.py (used to print details
about a set of tests), and makeTest.py (used to create a new testcase directory 
structure). Each launch executable has a detailed help summary which will be printed
to the console using the -h option. To print the help usage, and then run all tests 
in the testcases directory use

 $ runTest.py -h
 $ runTest.py


Release History
---------------
0.1.7 to 0.2.0
--------------
- This release includes updates to the Python doc strings for automated generation of 
  epydoc using the Epydoc package (http://epydoc.sourceforge.net). The installer now 
  distributes the generated epydoc in the site-packages/pysys-doc directory. For 
  windows installs a link to the epydoc and release notes is now added as a link in the 
  start menu items
- Added the setup() method to the BaseTest class to allow custom setup actions to be 
  performed prior to execution of a particular test case
- Fixed a bug where if the --type option was not supplied to ConsoleMakeTestHelper
  as a command line option, the resulting descriptor had type="None"

0.1.6 to 0.1.7
--------------
- The Manual Tester UI has been updated so that it can be resized, and is easier to 
  navigate through the tests. Many thanks to Tim McCormick who contributed to the UI 
  improvements
- The BaseRunner start method now takes an optional list of result writer class instances 
  to perform test audit logging at the end of a test cycle. This allows custom result 
  writers to be passed to the runner to, for example, write the results to a database, 
  proprietary system etc
  
0.1.5 to 0.1.6
--------------
- Added the ability to differentiate between automated and manual testcases using the 
  test attribute to the pysystest element in the testcase descriptor. If the attribute 
  is not present the test will be assumed to be an automated test. The runTest and 
  printTest launch helpers allow you to differentiate between automated and manual 
  tests using the --type command line argument. For more information see the examples 
  in pysys-examples

0.1.4 to 0.1.5
--------------
- Added support for the requirements traceability. This includes printing requirements 
  covered by a set of testcases, and running testcases which cover a particular 
  requirement id

0.1.3 to 0.1.4
--------------
- Added the ConsoleMakeTestHelper class to pysys.launcher.console. This facilitates 
  the creation of new testcase structures from the command line. Updated 
  pysys-examples/fibonacci to demonstrate the use of the utility class 